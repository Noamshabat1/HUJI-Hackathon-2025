{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samue\\\\Desktop\\\\Codage\\\\HUJI-Hackathon-2025\\\\nurse_online\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\n\n// List of taboo subjects (sensitive keywords)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TABOO_SUBJECTS = ['diagnosis',\n// Specific diagnosis\n'treatment',\n// Treatment details\n'medication',\n// Specific medication names\n'prognosis',\n// Prognosis or future state\n'medical history',\n// Medical history\n'test results',\n// Test results\n'billing',\n// Billing information\n'insurance',\n// Insurance information\n'social security',\n// Social Security Number\n'date of birth',\n// Exact date of birth\n'address',\n// Personal address\n'family history',\n// Family history\n'allergies',\n// Specific allergies\n'procedures' // Past or future medical procedures\n];\n\n// Simulation of a database of connection codes and patients\nconst MOCK_DATABASE = {\n  \"CODE123\": {\n    // Valid code\n    patientId: \"P001\",\n    name: \"John Doe\",\n    hospital: \"City General Hospital\",\n    // Added hospital name\n    department: \"Cardiology\",\n    // Replaced with department\n    attendingPhysician: \"Dr. Smith\",\n    attendingPhysicianPermission: true,\n    // Permission granted\n    condition: \"Stable\",\n    lastUpdate: \"2024-07-26 10:00 AM\",\n    validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000),\n    // Valid for 24h\n    chatHistory: [{\n      sender: 'System',\n      text: 'Chat room opened for John Doe.'\n    }]\n  },\n  \"CODE456\": {\n    // Another valid code\n    patientId: \"P002\",\n    name: \"Jane Roe\",\n    hospital: \"County Medical Center\",\n    // Added hospital name\n    department: \"Neurology\",\n    // Replaced with department\n    attendingPhysician: \"Dr. Emily Carter\",\n    attendingPhysicianPermission: false,\n    // Permission not granted\n    condition: \"Critical but improving\",\n    lastUpdate: \"2024-07-26 11:30 AM\",\n    validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000),\n    chatHistory: [{\n      sender: 'System',\n      text: 'Chat room opened for Jane Roe.'\n    }]\n  },\n  \"EXPIRED789\": {\n    // Code that would be expired\n    patientId: \"P003\",\n    name: \"Peter Pan\",\n    hospital: \"Children's Health Center\",\n    // Added hospital name\n    department: \"Pediatrics\",\n    // Replaced with department\n    attendingPhysician: \"Dr. Hook\",\n    attendingPhysicianPermission: true,\n    // Permission granted (even if code is expired)\n    condition: \"Recovering\",\n    lastUpdate: \"2024-07-24 09:00 AM\",\n    validUntil: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // Expired 2 days ago\n  }\n};\nconst validateConnectionCodeAndFetchData = async code => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate network latency\n      const record = MOCK_DATABASE[code.toUpperCase()];\n      if (!record) {\n        reject(new Error(\"Invalid connection code. Please try again.\"));\n        return;\n      }\n      if (new Date() > record.validUntil) {\n        reject(new Error(\"This connection code has expired. Please request a new one.\"));\n        return;\n      }\n      resolve(record); // Return the entire patient record\n    }, 1000);\n  });\n};\nfunction App() {\n  _s();\n  const [connectionCode, setConnectionCode] = useState('');\n  const [patientData, setPatientData] = useState(null); // Stores complete patient data\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isInChatMode, setIsInChatMode] = useState(false);\n  const [showNurseMessageInput, setShowNurseMessageInput] = useState(false); // State to control nurse message input visibility\n  const [nurseMessage, setNurseMessage] = useState(''); // State for the nurse message content\n  const [nurseMessageSent, setNurseMessageSent] = useState(false); // State to track if nurse message was sent\n  const [isNurseButtonDisabled, setIsNurseButtonDisabled] = useState(false); // State to disable nurse message button\n\n  const handleInputChange = event => {\n    setConnectionCode(event.target.value);\n  };\n  const handleMessageChange = event => {\n    setCurrentMessage(event.target.value);\n  };\n  const handleSubmitConnectionCode = async event => {\n    event.preventDefault();\n    if (!connectionCode.trim()) {\n      setError('Please enter a connection code.');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setPatientData(null);\n    try {\n      const data = await validateConnectionCodeAndFetchData(connectionCode);\n      setPatientData(data);\n      // Prepare patient information for initial display in chat\n      const initialPatientInfo = `\nPatient Name: ${data.name} (ID: ${data.patientId})\nHospital: ${data.hospital}\nDepartment: ${data.department}\n${data.attendingPhysicianPermission ? `Attending Physician: ${data.attendingPhysician}` : ''}\nCondition: ${data.condition}\nLast Update: ${data.lastUpdate}\nCode valid until: ${data.validUntil.toLocaleString()}\n      `.trim();\n      setChatMessages([{\n        sender: 'System',\n        text: `Connection established for patient ${data.name}.`\n      }, {\n        sender: 'System',\n        text: 'Patient Details:',\n        details: initialPatientInfo\n      }]);\n      setIsInChatMode(true);\n    } catch (err) {\n      setError(err.message);\n      setIsInChatMode(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async event => {\n    event.preventDefault();\n    if (!currentMessage.trim()) return;\n    const userMessage = currentMessage.trim();\n    setChatMessages([...chatMessages, {\n      sender: 'User',\n      text: userMessage\n    }]); // Changed sender to User\n    setCurrentMessage('');\n\n    // Check if the message contains a taboo subject\n    const isTaboo = TABOO_SUBJECTS.some(subject => userMessage.toLowerCase().includes(subject.toLowerCase()));\n    let messageContentToSend;\n    if (isTaboo) {\n      // If it's a taboo subject, send a specific instruction to the backend.\n      // The backend will interpret this instruction to ask Gemini to respond with the privacy message.\n      messageContentToSend = \"SEND_PRIVACY_MESSAGE\"; // Indicator for the backend\n    } else {\n      // Otherwise, send the original user message\n      messageContentToSend = userMessage;\n    }\n    setIsLoading(true); // Indicate loading while waiting for backend response\n\n    try {\n      // TODO: Replace with actual backend API call\n      // Replace '/api/chat' with your actual backend endpoint.\n      const response = await fetch('/api/chat', {\n        // Placeholder endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: messageContentToSend,\n          patientId: patientData === null || patientData === void 0 ? void 0 : patientData.patientId // Send patient ID to backend if needed\n          // TODO: Include chat history if the backend needs it for context\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Backend error: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // TODO: Extract the actual Gemini response text from the backend's response data\n      // Assuming the backend returns the response in a field like 'replyText'\n      const geminiResponseText = data.replyText || \"Could not get response from assistant.\"; // Placeholder for actual response field\n\n      setChatMessages(prevMessages => [...prevMessages, {\n        sender: 'Gemini',\n        text: geminiResponseText\n      }]);\n    } catch (err) {\n      console.error(\"Error communicating with backend:\", err);\n      setChatMessages(prevMessages => [...prevMessages, {\n        sender: 'System',\n        text: `Error: ${err.message}`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendNurseMessage = async () => {\n    if (!nurseMessage.trim()) return;\n    setIsLoading(true);\n    setError(null);\n    try {\n      // TODO: Replace with actual backend API call for nurse/staff messages\n      // Replace '/api/nurse-message' with your actual backend endpoint for these messages.\n      const response = await fetch('/api/nurse-message', {\n        // Placeholder endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: nurseMessage.trim(),\n          patientId: patientData === null || patientData === void 0 ? void 0 : patientData.patientId // Include patient ID\n          // TODO: Include any other necessary context (e.g., nurse/staff recipient if applicable)\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Backend error: ${response.status}`);\n      }\n\n      // Assuming success, clear the message and hide the input\n      setNurseMessage('');\n      setShowNurseMessageInput(false);\n      setNurseMessageSent(true); // Set sent state to true\n      setIsNurseButtonDisabled(true); // Disable the button\n      // TODO: Optionally, add a confirmation message to the chat or a notification\n    } catch (err) {\n      console.error(\"Error sending message to nurse/staff backend:\", err);\n      // TODO: Display error to the user\n      setError(`Failed to send message: ${err.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  if (!isInChatMode) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Nurse Online - Patient Access\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmitConnectionCode,\n          className: \"patient-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"connectionCodeInput\",\n            children: \"Enter Connection Code:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"connectionCodeInput\",\n            value: connectionCode,\n            onChange: handleInputChange,\n            placeholder: \"e.g., CODE123\",\n            disabled: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: isLoading,\n            children: isLoading ? 'Connecting...' : 'Open chat room'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"terms-note\",\n          children: [\"*By entering the code, you accept the \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"terms of use\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 75\n          }, this), \" and \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"privacy policy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 108\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"App-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\xA9 2025 Nurse Online. All rights reserved.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Chat Room View\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App chat-mode\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Chat with Gemini - Patient: \", (patientData === null || patientData === void 0 ? void 0 : patientData.name) || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsInChatMode(false);\n          setConnectionCode('');\n          setPatientData(null);\n          setError(null);\n        },\n        className: \"exit-chat-button\",\n        children: \"Exit Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message message-${msg.sender.toLowerCase()}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.sender, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this), msg.text, msg.details && /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"message-details\",\n            children: msg.details\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 31\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        className: \"chat-input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: currentMessage,\n          onChange: handleMessageChange,\n          placeholder: \"Type your message to Gemini...\",\n          disabled: !patientData // Disable if no patient data (should not happen here)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !patientData || !currentMessage.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), !showNurseMessageInput && !nurseMessageSent && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowNurseMessageInput(true),\n        className: \"nurse-message-button\",\n        disabled: isNurseButtonDisabled,\n        children: \"Send message to Nurse/Staff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this), showNurseMessageInput && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nurse-message-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: nurseMessage,\n          onChange: e => setNurseMessage(e.target.value),\n          placeholder: \"Type your message for the Nurse/Staff...\",\n          rows: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendNurseMessage,\n          disabled: !nurseMessage.trim() || isLoading,\n          children: \"Send to Staff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowNurseMessageInput(false),\n          className: \"cancel-button\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), nurseMessageSent && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"confirmation-message\",\n        children: \"Your message has been received and is being sent to a staff member.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"App-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\xA9 2025 Nurse Online. Connected as: User | Patient ID: \", (patientData === null || patientData === void 0 ? void 0 : patientData.patientId) || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"n+DNBcJnJKcTqJKBZ6lMpZyvz2U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TABOO_SUBJECTS","MOCK_DATABASE","patientId","name","hospital","department","attendingPhysician","attendingPhysicianPermission","condition","lastUpdate","validUntil","Date","now","chatHistory","sender","text","validateConnectionCodeAndFetchData","code","Promise","resolve","reject","setTimeout","record","toUpperCase","Error","App","_s","connectionCode","setConnectionCode","patientData","setPatientData","currentMessage","setCurrentMessage","chatMessages","setChatMessages","isLoading","setIsLoading","error","setError","isInChatMode","setIsInChatMode","showNurseMessageInput","setShowNurseMessageInput","nurseMessage","setNurseMessage","nurseMessageSent","setNurseMessageSent","isNurseButtonDisabled","setIsNurseButtonDisabled","handleInputChange","event","target","value","handleMessageChange","handleSubmitConnectionCode","preventDefault","trim","data","initialPatientInfo","toLocaleString","details","err","message","handleSendMessage","userMessage","isTaboo","some","subject","toLowerCase","includes","messageContentToSend","response","fetch","method","headers","body","JSON","stringify","ok","status","json","geminiResponseText","replyText","prevMessages","console","handleSendNurseMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","placeholder","disabled","href","onClick","map","msg","index","e","rows","_c","$RefreshReg$"],"sources":["C:/Users/samue/Desktop/Codage/HUJI-Hackathon-2025/nurse_online/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\n// List of taboo subjects (sensitive keywords)\r\nconst TABOO_SUBJECTS = [\r\n  'diagnosis', // Specific diagnosis\r\n  'treatment', // Treatment details\r\n  'medication', // Specific medication names\r\n  'prognosis', // Prognosis or future state\r\n  'medical history', // Medical history\r\n  'test results', // Test results\r\n  'billing', // Billing information\r\n  'insurance', // Insurance information\r\n  'social security', // Social Security Number\r\n  'date of birth', // Exact date of birth\r\n  'address', // Personal address\r\n  'family history', // Family history\r\n  'allergies', // Specific allergies\r\n  'procedures' // Past or future medical procedures\r\n];\r\n\r\n// Simulation of a database of connection codes and patients\r\nconst MOCK_DATABASE = {\r\n  \"CODE123\": { // Valid code\r\n    patientId: \"P001\",\r\n    name: \"John Doe\",\r\n    hospital: \"City General Hospital\", // Added hospital name\r\n    department: \"Cardiology\", // Replaced with department\r\n    attendingPhysician: \"Dr. Smith\",\r\n    attendingPhysicianPermission: true, // Permission granted\r\n    condition: \"Stable\",\r\n    lastUpdate: \"2024-07-26 10:00 AM\",\r\n    validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000), // Valid for 24h\r\n    chatHistory: [{ sender: 'System', text: 'Chat room opened for John Doe.' }]\r\n  },\r\n  \"CODE456\": { // Another valid code\r\n    patientId: \"P002\",\r\n    name: \"Jane Roe\",\r\n    hospital: \"County Medical Center\", // Added hospital name\r\n    department: \"Neurology\", // Replaced with department\r\n    attendingPhysician: \"Dr. Emily Carter\",\r\n    attendingPhysicianPermission: false, // Permission not granted\r\n    condition: \"Critical but improving\",\r\n    lastUpdate: \"2024-07-26 11:30 AM\",\r\n    validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000),\r\n    chatHistory: [{ sender: 'System', text: 'Chat room opened for Jane Roe.' }]\r\n  },\r\n  \"EXPIRED789\": { // Code that would be expired\r\n    patientId: \"P003\",\r\n    name: \"Peter Pan\",\r\n    hospital: \"Children's Health Center\", // Added hospital name\r\n    department: \"Pediatrics\", // Replaced with department\r\n    attendingPhysician: \"Dr. Hook\",\r\n    attendingPhysicianPermission: true, // Permission granted (even if code is expired)\r\n    condition: \"Recovering\",\r\n    lastUpdate: \"2024-07-24 09:00 AM\",\r\n    validUntil: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // Expired 2 days ago\r\n  }\r\n};\r\n\r\nconst validateConnectionCodeAndFetchData = async (code) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => { // Simulate network latency\r\n      const record = MOCK_DATABASE[code.toUpperCase()];\r\n      if (!record) {\r\n        reject(new Error(\"Invalid connection code. Please try again.\"));\r\n        return;\r\n      }\r\n      if (new Date() > record.validUntil) {\r\n        reject(new Error(\"This connection code has expired. Please request a new one.\"));\r\n        return;\r\n      }\r\n      resolve(record); // Return the entire patient record\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nfunction App() {\r\n  const [connectionCode, setConnectionCode] = useState('');\r\n  const [patientData, setPatientData] = useState(null); // Stores complete patient data\r\n  const [currentMessage, setCurrentMessage] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isInChatMode, setIsInChatMode] = useState(false);\r\n  const [showNurseMessageInput, setShowNurseMessageInput] = useState(false); // State to control nurse message input visibility\r\n  const [nurseMessage, setNurseMessage] = useState(''); // State for the nurse message content\r\n  const [nurseMessageSent, setNurseMessageSent] = useState(false); // State to track if nurse message was sent\r\n  const [isNurseButtonDisabled, setIsNurseButtonDisabled] = useState(false); // State to disable nurse message button\r\n\r\n  const handleInputChange = (event) => {\r\n    setConnectionCode(event.target.value);\r\n  };\r\n\r\n  const handleMessageChange = (event) => {\r\n    setCurrentMessage(event.target.value);\r\n  };\r\n\r\n  const handleSubmitConnectionCode = async (event) => {\r\n    event.preventDefault();\r\n    if (!connectionCode.trim()) {\r\n      setError('Please enter a connection code.');\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setPatientData(null);\r\n\r\n    try {\r\n      const data = await validateConnectionCodeAndFetchData(connectionCode);\r\n      setPatientData(data);\r\n      // Prepare patient information for initial display in chat\r\n      const initialPatientInfo = `\r\nPatient Name: ${data.name} (ID: ${data.patientId})\r\nHospital: ${data.hospital}\r\nDepartment: ${data.department}\r\n${data.attendingPhysicianPermission ? `Attending Physician: ${data.attendingPhysician}` : ''}\r\nCondition: ${data.condition}\r\nLast Update: ${data.lastUpdate}\r\nCode valid until: ${data.validUntil.toLocaleString()}\r\n      `.trim();\r\n      setChatMessages([\r\n        { sender: 'System', text: `Connection established for patient ${data.name}.` },\r\n        { sender: 'System', text: 'Patient Details:', details: initialPatientInfo }\r\n      ]);\r\n      setIsInChatMode(true);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setIsInChatMode(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (event) => {\r\n    event.preventDefault();\r\n    if (!currentMessage.trim()) return;\r\n\r\n    const userMessage = currentMessage.trim();\r\n    setChatMessages([...chatMessages, { sender: 'User', text: userMessage }]); // Changed sender to User\r\n    setCurrentMessage('');\r\n\r\n    // Check if the message contains a taboo subject\r\n    const isTaboo = TABOO_SUBJECTS.some(subject =>\r\n      userMessage.toLowerCase().includes(subject.toLowerCase())\r\n    );\r\n\r\n    let messageContentToSend;\r\n\r\n    if (isTaboo) {\r\n      // If it's a taboo subject, send a specific instruction to the backend.\r\n      // The backend will interpret this instruction to ask Gemini to respond with the privacy message.\r\n      messageContentToSend = \"SEND_PRIVACY_MESSAGE\"; // Indicator for the backend\r\n    } else {\r\n      // Otherwise, send the original user message\r\n      messageContentToSend = userMessage;\r\n    }\r\n\r\n    setIsLoading(true); // Indicate loading while waiting for backend response\r\n\r\n    try {\r\n      // TODO: Replace with actual backend API call\r\n      // Replace '/api/chat' with your actual backend endpoint.\r\n      const response = await fetch('/api/chat', { // Placeholder endpoint\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          message: messageContentToSend,\r\n          patientId: patientData?.patientId // Send patient ID to backend if needed\r\n          // TODO: Include chat history if the backend needs it for context\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Backend error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // TODO: Extract the actual Gemini response text from the backend's response data\r\n      // Assuming the backend returns the response in a field like 'replyText'\r\n      const geminiResponseText = data.replyText || \"Could not get response from assistant.\"; // Placeholder for actual response field\r\n\r\n      setChatMessages(prevMessages => [...prevMessages, { sender: 'Gemini', text: geminiResponseText }]);\r\n\r\n    } catch (err) {\r\n      console.error(\"Error communicating with backend:\", err);\r\n       setChatMessages(prevMessages => [...prevMessages, { sender: 'System', text: `Error: ${err.message}` }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSendNurseMessage = async () => {\r\n    if (!nurseMessage.trim()) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // TODO: Replace with actual backend API call for nurse/staff messages\r\n      // Replace '/api/nurse-message' with your actual backend endpoint for these messages.\r\n      const response = await fetch('/api/nurse-message', { // Placeholder endpoint\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          message: nurseMessage.trim(),\r\n          patientId: patientData?.patientId // Include patient ID\r\n          // TODO: Include any other necessary context (e.g., nurse/staff recipient if applicable)\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Backend error: ${response.status}`);\r\n      }\r\n\r\n      // Assuming success, clear the message and hide the input\r\n      setNurseMessage('');\r\n      setShowNurseMessageInput(false);\r\n      setNurseMessageSent(true); // Set sent state to true\r\n      setIsNurseButtonDisabled(true); // Disable the button\r\n      // TODO: Optionally, add a confirmation message to the chat or a notification\r\n\r\n    } catch (err) {\r\n      console.error(\"Error sending message to nurse/staff backend:\", err);\r\n      // TODO: Display error to the user\r\n      setError(`Failed to send message: ${err.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!isInChatMode) {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Nurse Online - Patient Access</h1>\r\n        </header>\r\n        <main>\r\n          <form onSubmit={handleSubmitConnectionCode} className=\"patient-form\">\r\n            <label htmlFor=\"connectionCodeInput\">Enter Connection Code:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"connectionCodeInput\"\r\n              value={connectionCode}\r\n              onChange={handleInputChange}\r\n              placeholder=\"e.g., CODE123\"\r\n              disabled={isLoading}\r\n            />\r\n            <button type=\"submit\" disabled={isLoading}>\r\n              {isLoading ? 'Connecting...' : 'Open chat room'}\r\n            </button>\r\n          </form>\r\n\r\n          <p className=\"terms-note\">*By entering the code, you accept the <a href=\"#\">terms of use</a> and <a href=\"#\">privacy policy</a>.</p>\r\n\r\n          {error && <p className=\"error-message\">{error}</p>}\r\n        </main>\r\n        <footer className=\"App-footer\">\r\n          <p>&copy; 2025 Nurse Online. All rights reserved.</p>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Chat Room View\r\n  return (\r\n    <div className=\"App chat-mode\">\r\n      <header className=\"App-header\">\r\n        <h1>Chat with Gemini - Patient: {patientData?.name || 'N/A'}</h1>\r\n        <button onClick={() => { setIsInChatMode(false); setConnectionCode(''); setPatientData(null); setError(null); }} className=\"exit-chat-button\">\r\n          Exit Chat\r\n        </button>\r\n      </header>\r\n      <main className=\"chat-container\">\r\n        <div className=\"chat-messages\">\r\n          {chatMessages.map((msg, index) => (\r\n            <div key={index} className={`message message-${msg.sender.toLowerCase()}`}>\r\n              <strong>{msg.sender}:</strong> \r\n              {msg.text}\r\n              {msg.details && <pre className=\"message-details\">{msg.details}</pre>}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <form onSubmit={handleSendMessage} className=\"chat-input-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={currentMessage}\r\n            onChange={handleMessageChange}\r\n            placeholder=\"Type your message to Gemini...\"\r\n            disabled={!patientData} // Disable if no patient data (should not happen here)\r\n          />\r\n          <button type=\"submit\" disabled={!patientData || !currentMessage.trim()}>\r\n            Send\r\n          </button>\r\n        </form>\r\n\r\n        {/* Button to show nurse message input */}\r\n        {!showNurseMessageInput && !nurseMessageSent && (\r\n          <button onClick={() => setShowNurseMessageInput(true)} className=\"nurse-message-button\" disabled={isNurseButtonDisabled}>\r\n            Send message to Nurse/Staff\r\n          </button>\r\n        )}\r\n\r\n        {/* Nurse message input area (conditionally rendered) */}\r\n        {showNurseMessageInput && (\r\n          <div className=\"nurse-message-input-area\">\r\n            <textarea\r\n              value={nurseMessage}\r\n              onChange={(e) => setNurseMessage(e.target.value)}\r\n              placeholder=\"Type your message for the Nurse/Staff...\"\r\n              rows=\"4\"\r\n            />\r\n            <button onClick={handleSendNurseMessage} disabled={!nurseMessage.trim() || isLoading}>\r\n              Send to Staff\r\n            </button>\r\n            <button onClick={() => setShowNurseMessageInput(false)} className=\"cancel-button\">\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Confirmation message */}\r\n        {nurseMessageSent && (\r\n          <p className=\"confirmation-message\">Your message has been received and is being sent to a staff member.</p>\r\n        )}\r\n\r\n      </main>\r\n      <footer className=\"App-footer\">\r\n        <p>&copy; 2025 Nurse Online. Connected as: User | Patient ID: {patientData?.patientId || 'N/A'}</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}